#!/usr/bin/env bash
set -e
VERSION=1.0.0
CONFIG_FILE="${ARCHITECT_CONFIG:-/etc/architect.sh}"
if [ ! -f "$CONFIG_FILE" ]; then
  echo "[!] Config file not found: $CONFIG_FILE" >&2
  exit 1
fi
source $CONFIG_FILE
DRY_RUN=0
FORCE=0
ARCHITECT_DIR="${ARCHITECT_DIR:-$HOME/.architect}"
[[ " $* " == *" --dry-run "* ]] && DRY_RUN=1
[[ " $* " == *" --force "* ]] && FORCE=1
mkdir -p ~/.architect/snapshots

diff() {
  echo "[*] Comparing current system to config..."]
  declare -A desired_pkgs
  for set in "${system_packages[@]}"; do
    for pkg in ${packages_by_set[$set]}; do
      desired_pkgs["$pkg"]=1
    done
  done
  declare -A current_pkgs
  while read -r name ver; do
    current_pkgs["$name"]="$ver"
  done < <(pacman -Q)
  for pkg in "${!desired_pkgs[@]}"; do
    if [[ -z "${current_pkgs[$pkg]}" ]]; then
      echo -e "\033[32m+ $pkg (not installed)\033[0m"
    elif [[ -n "${expected_versions[$pkg]}" && "${current_pkgs[$pkg]}" != "${expected_versions[$pkg]}" ]]; then
      echo -e "\033[33m~ $pkg (current: ${current_pkgs[$pkg]}, expected: ${expected_versions[$pkg]})\033[0m"
    fi
  done
  for pkg in "${!current_pkgs[@]}"; do
    if [[ -z "${desired_pkgs[$pkg]}" ]]; then
      echo -e "\033[31m- $pkg=${current_pkgs[$pkg]} (not in config)\033[0m"
    fi
  done
  exit
}

apply_diff() {
  echo "[*] Applying diff between current system and config..."
  [[ " $* " != *" --no-snapshot "* ]] && take_snapshot
  declare -A desired_pkgs
  declare -A expected_versions
  for set in "${system_packages[@]}"; do
    for pkg in ${packages_by_set[$set]}; do
      desired_pkgs["$pkg"]=1
      if [[ -n "${expected_versions_config[$pkg]}" ]]; then
        expected_versions["$pkg"]="${expected_versions_config[$pkg]}"
      fi
    done
  done
  declare -A current_pkgs
  while read -r name ver; do
    current_pkgs["$name"]="$ver"
  done < <(pacman -Q)
  to_install=()
  to_remove=()
  for pkg in "${!desired_pkgs[@]}"; do
    if [[ -z "${current_pkgs[$pkg]}" ]]; then
      if [[ -n "${expected_versions[$pkg]}" ]]; then
        to_install+=("${pkg}=${expected_versions[$pkg]}")
      else
        to_install+=("$pkg")
      fi
    elif [[ -n "${expected_versions[$pkg]}" && "${current_pkgs[$pkg]}" != "${expected_versions[$pkg]}" ]]; then
      to_install+=("${pkg}=${expected_versions[$pkg]}")
    fi
  done
  for pkg in "${!current_pkgs[@]}"; do
    if [[ -z "${desired_pkgs[$pkg]}" ]]; then
      to_remove+=("$pkg")
    fi
  done
  if [[ ${#to_install[@]} -gt 0 ]]; then
    echo "[+] Installing/upgrading: ${to_install[*]}"
    sudo pacman -S --noconfirm "${to_install[@]}"
  fi
  if [[ ${#to_remove[@]} -gt 0 ]]; then
    echo "[-] Removing: ${to_remove[*]}"
    sudo pacman -Rns --noconfirm "${to_remove[@]}"
  fi
  echo "[+] System synced with config (version-aware)."
}

sync_dotfiles() {
  local src_dir="${1:-$ARCHITECT_DIR/dotfiles}"
  for name in "${!dotfiles[@]}"; do
    local src="$src_dir/$name"
    local target="${dotfiles[$name]}"
    if [ ! -e "$src" ]; then
      echo "[!] Source dotfile missing: $src"
      continue
    fi
    if [ -L "$target" ] || [ -e "$target" ]; then
      rm -rf "$target"
    fi

    ln -s "$src" "$target"
    echo "[+] Linked $src -> $target"
  done
  exit
}

status_dotfiles() {
  local src_dir="${1:-$ARCHITECT_DIR/dotfiles}"
  printf "%-20s %-40s %-10s\n" "Dotfile" "Target Path" "Status"
  for name in "${!dotfiles[@]}"; do
    local src="$src_dir/$name"
    local target="${dotfiles[$name]}"
    local status="missing source"
    if [ ! -e "$src" ]; then
      status="missing source"
    elif [ ! -e "$target" ]; then
      status="missing target"
    elif [ -L "$target" ]; then
      if [ "$(readlink "$target")" = "$src" ]; then
        status="linked"
      else
        status="linked elsewhere"
      fi
    else
      status="exists but not symlink"
    fi
    printf "%-20s %-40s %-10s\n" "$name" "$target" "$status"
  done
  exit
}

edit_dotfile() {
  local name="$1"
  local src_dir="${2:-$ARCHITECT_DIR/dotfiles}"
  local src="$src_dir/$name"
  if [ -z "$name" ]; then
    echo "[!] architect --dotfiles-edit <name>"
    return 1
  fi
  if [ ! -e "$src" ]; then
    echo "[!] Dotfile source not found: $src"
    return 1
  fi
  ${EDITOR:-nano} "$src"
  exit
}

get_desired_pkgs() {
  local pkgs=()
  for set in "${system_packages[@]}"; do
    for pkg in ${packages_by_set[$set]}; do
      pkgs+=("$pkg")
    done
  done
  echo "${pkgs[@]}"
}

resolve_aur_packages() {
  local all_pkgs=()
  for set in "${aur_packages[@]}"; do
    for pkg in ${aur_packages_by_set[$set]}; do
      all_pkgs+=("$pkg")
    done
  done
  echo "${all_pkgs[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '
}

install_aur() {
  local pkgs
  pkgs=($(resolve_aur_packages))
  for pkg in "${pkgs[@]}"; do
    echo "[*] Building AUR package: $pkg"
    local build_dir="/tmp/architect-build-$pkg"
    if [ "$DRY_RUN" = 1 ]; then
      echo "[DRY RUN] rm -rf $build_dir"
      echo "[DRY RUN] git clone https://aur.archlinux.org/$pkg.git $build_dir"
      echo "[DRY RUN] cd $build_dir && makepkg -si --noconfirm"
      continue
    fi

    rm -rf "$build_dir"
    git clone "https://aur.archlinux.org/$pkg.git" "$build_dir" || {
      echo "[!] Failed to clone $pkg"
      continue
    }
    (cd "$build_dir" && makepkg -si --noconfirm) || {
      echo "[!] Failed to build/install $pkg"
      continue
    }
  done
}

install_packages() {
  local desired=($(get_desired_pkgs))
  local to_install=()
  for pkg in "${desired[@]}"; do
    if ! pacman -Qi "$pkg" &>/dev/null; then
      to_install+=("$pkg")
    fi
  done

  if ((${#to_install[@]})); then
    if ((DRY_RUN)); then
      echo "[DRY RUN] sudo pacman -S --noconfirm ${to_install[*]}"
      echo "[DRY RUN] git clone and makepkg -si for all AUR packages."
    else
      [[ " $* " != *" --no-snapshot "* ]] && take_snapshot
      sudo pacman -S --noconfirm "${to_install[@]}"
      echo "[*] Installing AUR packages..."
      install_aur
    fi
  else
    echo "[+] All desired packages already installed."
  fi
}

remove_packages() {
  local desired=($(get_desired_pkgs))
  local installed=($(pacman -Qq))
  local to_remove=()
  for pkg in "${installed[@]}"; do
    if [[ ! " ${desired[*]} " =~ " ${pkg} " ]]; then
      to_remove+=("$pkg")
    fi
  done

  if ((${#to_remove[@]})); then
    echo "[*] Packages to remove: ${to_remove[*]}"
    if ((DRY_RUN)); then
      echo "[DRY RUN] sudo pacman -Rns --noconfirm ${to_remove[*]}"
    else
      pre_remove
      sudo pacman -Rns --noconfirm "${to_remove[@]}"
    fi
  else
    echo "[+] No extra packages to remove."
  fi
}

#!/usr/bin/env bash
generate_config() {
  local pkgs=($(pacman -Qq))
  echo "# Generated by Architect on $(date)"
  echo "# Feel free to edit. Detected packages are in the [detected] set."
  echo
  echo "declare -A packages_by_set=("
  echo "  [detected]=\"${pkgs[*]}\""
  echo ")"
  echo
  echo "system_packages=(detected)"
  echo "post_install() { echo; } # no-op"
  echo "pre_remove() { echo; } # no-op"
  exit
}

help() {
  cat <<EOF
Architect - Declarative system manager for Arch GNU/Linux systems

Usage:
  $0 [options]

Options:
  --make-config             Generate a template config and prints it in stdout
  --validate                Validate the config file at \$ARCHITECT_CONFIG
  --dry-run                 Simulate all operations without making changes
  --force                   Forces stuff without confirmation
  --take-snapshot-now       Save current package list as a snapshot
  --rollback                Revert to the latest snapshot
  --diff                    Show package differences from current config
  --apply-diff              Install/remove packages to match config
  --no-snapshot             Skip creating automatic snapshot
  --list-snapshots          List saved snapshots
  --purge-all-snapshots     Purge all saved snapshots (USE WITH CAUTION)
  --purge-snapshots <last>  Purge all saved snapshots and keep last <last> (default: 3)
  --install-aur-only        Build and install only AUR packages
  --pacstrap <dir>          Bootstrap a new Arch system at <dir> using config
  --dotfiles-sync|edit|status
                           Manage dotfiles defined in config
  --help                    Show this help message
  --version                 Show Architect version

Environment:
  ARCHITECT_CONFIG          Path to config file (default: /etc/architect.sh)
  ARCHITECT_DIR             Base dir for snapshots, dotfiles, etc (default: ~/.architect)

Examples:
  $0 --dry-run
  ARCHITECT_CONFIG=./myconfig.sh $0 --install-aur-only
  $0 --pacstrap /mnt

EOF
  exit
}

version() {
  echo "Architect v$VERSION"
  exit
}

pacstrapper() {
  local target="$1"
  local ARCHITECT_DIR="${2:-$ARCHITECT_DIR}"
  if [ -z "$target" ]; then
    echo "[!] architect --pacstrap <target_mount_point>"
    return 1
  fi

  if [ ! -d "$target" ]; then
    echo "[!] Target directory $target does not exist."
    return 1
  fi
  echo "[*] Starting pacstrap in $target..."
  sudo pacstrap -K "$target" ${packages_by_set[base]}
  echo "[*] Copying Architect config to $target$ARCHITECT_DIR ..."
  sudo mkdir -p "$target/$ARCHITECT_DIR"
  sudo cp -r "/etc/architect.sh" "$target/etc/architect.sh"
  if [ -d "$ARCHITECT_DIR/dotfiles" ]; then
    sudo cp -r "$ARCHITECT_DIR/dotfiles" "$target/$ARCHITECT_DIR/"
  fi
  echo "[*] Running post-install hooks inside chroot..."
  sudo arch-chroot "$target" /bin/bash -c "
    source /etc/architect.sh
    architect --apply-diff --no-snapshot
    post_install
  "
  echo "[+] Pacstrap complete in $target"
  exit
}

take_snapshot() {
  local snapfile=~/.architect/snapshots/$(date +%Y%m%d-%H%M%S).pkglist
  pacman -Q | awk '{print $1 "=" $2}' >"$snapfile"
  echo "[+] Snapshot saved: $snapfile"
}

list_snapshots() {
  echo "[?] Snapshots Available:"
  if ! ls -1 ~/.architect/snapshots &>/dev/null; then
    echo "No snapshots found."
    return
  fi

  ls -1 ~/.architect/snapshots | nl
  exit
}

purge_all_snapshots() {
  local dir="$ARCHITECT_DIR/snapshots"
  if [ ! -d "$dir" ]; then
    echo "[!] Snapshot dir not found: $dir"
    return 1
  fi
  if [ "$FORCE" != 1 ] && [ "$DRY_RUN" != 1 ]; then
    read -rp "[?] Really delete ALL snapshots? [y/N] " confirm
    [[ "$confirm" != [yY] ]] && echo "[x] Cancelled." && exit 1
  fi
  echo "[*] Purging all snapshots in $dir..."
  [ "$DRY_RUN" == 1 ] && echo "[+] [DRY RUN] rm -f \"$dir\"/*.pkglist" && exit
  rm -f "$dir"/*.pkglist
  echo "[+] Snapshots purged."
  exit
}

rollback() {
  echo "[*] Available snapshots:"
  ls -1 ~/.architect/snapshots | nl
  read -p "[*] Choose snapshot number to rollback: " num
  snap=$(ls ~/.architect/snapshots | sed -n "${num}p")
  [[ -z $snap ]] && echo "Invalid selection." && exit 1
  echo "[*] Restoring snapshot $snap"
  mapfile -t pkgs_to_install <~/.architect/snapshots/$snap
  sudo pacman -S --noconfirm "${pkgs_to_install[@]}"
  pkgstemp=()
  for pv in "${pkgs_to_install[@]}"; do
    pkgstemp+=("${pv%% *}")
  done
  current_pkgs=$(pacman -Qq)
  for pkg in $current_pkgs; do
    if [[ ! " ${pkgs_to_install[*]} " =~ " $pkg " ]]; then
      sudo pacman -Rns --noconfirm "$pkg"
    fi
  done
  echo "[+] System rolled back to snapshot: $snap"
  exit
}

purge_snapshots() {
  local dir="$ARCHITECT_DIR/snapshots"
  local keep=${1:-3}
  if [ ! -d "$dir" ]; then
    echo "[!] Snapshot dir not found: $dir"
    return 1
  fi
  echo "[*] Keeping last $keep snapshot(s), deleting older ones..."
  [ "$DRY_RUN" == 1 ] && echo "[+] [DRY RUN] rm -f:" && ls -1t "$dir"/*.pkglist | tail -n +$((keep + 1)) && exit
  ls -1t "$dir"/*.pkglist | tail -n +$((keep + 1)) | xargs -r rm -f
  echo "[+] Old snapshots purged."
  exit
}

take_snapshot_now() {
  take_snapshot
  exit
}

validate_aur_package() {
  local pkg="$1"
  local res
  res=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg=$pkg")
  local count
  count=$(echo "$res" | grep -o '"resultcount":[0-9]*' | grep -o '[0-9]*')
  if [ "$count" -eq 1 ]; then
    echo "[+] AUR package '$pkg' found."
    return 0
  else
    echo "[!] AUR package '$pkg' NOT found."
    return 1
  fi
}

validate_all_aur_packages() {
  local pkgs
  pkgs=($(resolve_aur_packages))
  local failed=0
  for pkg in "${pkgs[@]}"; do
    validate_aur_package "$pkg" || failed=1
  done
  return $failed
}

validate_config() {
  echo "[*] Validating config file: $CONFIG_FILE"
  if [ ! -f "$CONFIG_FILE" ]; then
    echo "[!] Config file not found: $CONFIG_FILE"
    exit 1
  fi
  if ! bash -n "$CONFIG_FILE"; then
    echo "[!] Syntax error in config file"
    exit 1
  fi
  for set in "${system_packages[@]}"; do
    for pkg in ${packages_by_set[$set]}; do
      if ! pacman -Si "$pkg" &>/dev/null; then
        echo "[!] Package '$pkg' not found in official repos"
      else
        echo "[+] Package '$pkg' found in official repos"
      fi
    done
  done

  if ! validate_all_aur_packages; then
    echo "[!] Some AUR packages failed validation."
    exit 1
  fi
  echo "[+] Config validation completed"
  exit 0
}

[[ " $* " == *" --help "* ]] && help
[[ " $* " == *" --version "* ]] && version
[[ " $* " == *" --validate "* ]] && validate_config
[[ " $* " == *" --make-config "* ]] && generate_config
[[ " $* " == *" --diff "* ]] && diff
[[ " $* " == *" --apply-diff "* ]] && apply_diff
[[ " $* " == *" --list-snapshots "* ]] && list_snapshots
[[ " $* " == *" --take-snapshot-now "* ]] && take_snapshot_now
[[ " $* " == *" --rollback "* ]] && rollback
[[ " $* " == *" --install-aur-only "* ]] && install_aur && exit
[[ " $* " == *" --dotfiles-sync "* ]] && sync_dotfiles "$2"
[[ " $* " == *" --dotfiles-status "* ]] && status_dotfiles "$2"
[[ " $* " == *" --dotfiles-edit "* ]] && edit_dotfile "$2" "$3"
[[ " $* " == *" --pacstrap "* ]] && pacstrapper "$2" "$3"
[[ " $* " == *" --purge-all-snapshots "* ]] && purge_all_snapshots
[[ " $* " == *" --purge-snapshots "* ]] && purge_snapshots "$2"
remove_packages
install_packages
post_install
